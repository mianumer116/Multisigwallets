// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;
contract multisigwallet{
 address[]private  owners;
    
    constructor(address [] memory _owners){
        owners=_owners;
        
    }
    //Struct for contract is here
    struct Transfer{
        address from;
        address to;
        uint amount;
        uint approvereq;
        uint id;

        bool isexecuted;


    }
    struct ADDOWNER{
        uint id;
        address from;
        address to;
        uint approvedreq;
        bool isexecuted;
    }
    //ALL ARRAY FOR STORE 
    Transfer[]public Transfers;
    ADDOWNER[]public ADDOWNERS;
    //ALL MAPPING ARE STORE HERE
    mapping(address=>uint256)private balance;
    mapping(address=>mapping(uint=>bool))alredyvote;
    mapping(address=>mapping(uint=>bool))alredyvoteforowner;
    //ALL EVENTS ARE HERE
    event Deposits(uint,uint);
    event RECEIVE(address,uint,uint);
    event ADDnewOWNER(uint,address,address,uint);
    event OWNERADD(address,uint,bool);



//ALL MODIFIER ARE HERE

modifier onlyowners{
    bool isowner;
    for(uint i=0;i<owners.length;i++){
        if(msg.sender==owners[i]){
            isowner=true;
            break;
        }

    }
    require(isowner,"onlyownerscan withdraw");
    _;
}
modifier checkowner(address to){
    bool isowner=false;
    for(uint i=0;i<owners.length;i++){
        if(to==owners[i]){
            isowner=true;
            break;
        }
    }
    require(!isowner,"this address is already owner");
    _;
}
//some baisc functions
function Balance()public  view returns(uint){
    return balance[msg.sender];
}
function Deposit()public  payable{
    require(msg.value>0,"balance shoud be bigger then zero");
    balance[msg.sender]+=msg.value;
    emit Deposits(msg.value,block.timestamp);
}
receive()external payable{
    require(msg.value>0,"balance should be bigger then zero");
    balance[msg.sender]+=msg.value;
    emit RECEIVE(msg.sender,msg.value,block.timestamp);
}
function TRansfer(address to,uint amount)public onlyowners{
    require(balance[msg.sender]>=amount,"balance is not enough");
    Transfers.push(Transfer(msg.sender,to,amount,0,Transfers.length,false));
}
function ApproveTransfer(uint id)public onlyowners{
    require(alredyvote[msg.sender][id]==false,"you alredy approve this request");
    //require(Transfers[id].isexecuted==false,"this request is alredy executed");
    require(id==Transfers[id].id&&Transfers[id].isexecuted==false,"id not found or alrdy approved");
    alredyvote[msg.sender][id]=true;
    Transfers[id].approvereq++;
    if(Transfers[id].approvereq>=owners.length){
        Transfers[id].isexecuted=true;
        balance[Transfers[id].from]-=Transfers[id].amount;
        balance[Transfers[id].to]+=Transfers[id].amount;
    }
}
 function ADOWNER(address to)public checkowner(to) onlyowners 
 {
    ADDOWNERS.push(ADDOWNER(ADDOWNERS.length,msg.sender,to,0,false));
    emit ADDnewOWNER(owners.length,msg.sender ,to ,block.timestamp );
 }
function APPROVEOWNER(uint id)public onlyowners{
    require(ADDOWNERS[id].isexecuted==false,"this is alredy executed");
    require(alredyvoteforowner[msg.sender][id]==false,"you alredy vote");
    alredyvoteforowner[msg.sender][id]=true;
    ADDOWNERS[id].approvedreq++;
    if(ADDOWNERS[id].approvedreq>=owners.length){
      owners.push(  ADDOWNERS[id].to);
      ADDOWNERS[id].isexecuted=true;
    }
    emit OWNERADD(ADDOWNERS[id].to,block.timestamp,ADDOWNERS[id].isexecuted );
}

}
