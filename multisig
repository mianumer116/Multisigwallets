// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

contract MultiSigWallet {
    address[] private owners;

    constructor(address[] memory _owners) {
        owners = _owners;
    }

    struct Transfer {
        address from;
        address to;
        uint amount;
        uint approvereq;
        uint id;
    }

    struct AddOwner {
        uint id;
        address from;
        address to;
        uint approvedreq;
        bool isexecuted;
    }

    struct DeleteOwner {
        uint id;
        address from;
        address to;
        uint approvereq;
        bool isexecuted;
    }

    Transfer[] public transfers;
    AddOwner[] public addOwners;
    DeleteOwner[] public deleteOwners;

    mapping(address => uint256) private balance;
    mapping(address => mapping(uint => bool)) private alredyvote;
    mapping(address => mapping(uint => bool)) private alredyvoteforowner;
    mapping(address => mapping(uint => bool)) private alredyvoteforremoveowner;

    event Deposits(uint, uint);
    event RECEIVE(address, uint, uint);
    event ADDnewOWNER(uint, address, address, uint);
    event OWNERADD(address, uint, bool);
    event RemoveOwners(address, address, uint, uint, bool);

    modifier onlyOwners {
        bool isOwner;
        for (uint i = 0; i < owners.length; i++) {
            if (msg.sender == owners[i]) {
                isOwner = true;
                break;
            }
        }
        require(isOwner, "Only owners can perform this action");
        _;
    }

    modifier checkOwner(address to) {
        bool isOwner = false;
        for (uint i = 0; i < owners.length; i++) {
            if (to == owners[i]) {
                isOwner = true;
                break;
            }
        }
        require(!isOwner, "This address is already an owner");
        _;
    }

    modifier checkToRemove(address to) {
        bool isPart;
        for (uint i = 0; i < owners.length; i++) {
            if (msg.sender == owners[i]) {
                isPart = true;
                break;
            }
        }
        require(isPart, "This address is not an owner");
        _;
    }

    function getBalance() public view returns (uint) {
        return balance[msg.sender];
    }

    function deposit() public payable {
        require(msg.value > 0, "Balance should be greater than zero");
        balance[msg.sender] += msg.value;
        emit Deposits(msg.value, block.timestamp);
    }

    receive() external payable {
        require(msg.value > 0, "Balance should be greater than zero");
        balance[msg.sender] += msg.value;
        emit RECEIVE(msg.sender, msg.value, block.timestamp);
    }

    function transfer(address to, uint amount) public onlyOwners {
        require(balance[msg.sender] >= amount, "Balance is not enough");
        transfers.push(Transfer(msg.sender, to, amount, 0, transfers.length, false));
    }

    function approveTransfer(uint id) public onlyOwners {
        require(!alredyvote[msg.sender][id], "You already approved this request");
        require(id < transfers.length && !transfers[id].isexecuted, "Invalid ID or already approved");
        
        alredyvote[msg.sender][id] = true;
        transfers[id].approvereq++;

        if (transfers[id].approvereq >= owners.length) {
            transfers[id].isexecuted = true;
            balance[transfers[id].from] -= transfers[id].amount;
            balance[transfers[id].to] += transfers[id].amount;
        }
    }

    function addOwner(address to) public checkOwner(to) onlyOwners {
        addOwners.push(AddOwner(addOwners.length, msg.sender, to, 0, false));
        emit ADDnewOWNER(owners.length, msg.sender, to, block.timestamp);
    }

    function approveOwner(uint id) public onlyOwners {
        require(!addOwners[id].isexecuted, "This is already executed");
        require(!alredyvoteforowner[msg.sender][id], "You already voted");

        alredyvoteforowner[msg.sender][id] = true;
        addOwners[id].approvedreq++;

        if (addOwners[id].approvedreq >= owners.length) {
            owners.push(addOwners[id].to);
            addOwners[id].isexecuted = true;
            emit OWNERADD(addOwners[id].to, block.timestamp, addOwners[id].isexecuted);
        }
    }

    function removeOwner(address to) public onlyOwners checkToRemove(to) {
        deleteOwners.push(DeleteOwner(deleteOwners.length, msg.sender, to, 0, false));
        emit RemoveOwners(msg.sender, to, owners.length, 0, false);
    }

    function voteToRemoveOwner(uint id) public onlyOwners {
        require(id < deleteOwners.length && !deleteOwners[id].isexecuted, "Invalid ID or already executed");
        require(!alredyvoteforremoveowner[msg.sender][id], "You already voted to remove this owner");

        alredyvoteforremoveowner[msg.sender][id] = true;
        deleteOwners[id].approvereq++;

        if (deleteOwners[id].approvereq >= owners.length) {
            deleteOwners[id].isexecuted = true;

            for (uint i = 0; i < owners.length; i++) {
                if (owners[i] == deleteOwners[id].to) {
                    for (uint j = i; j < owners.length - 1; j++) {
                        owners[j] = owners[j + 1];
                    }
                    owners.pop();
                    break;
                }
            }
        }
    }
}
